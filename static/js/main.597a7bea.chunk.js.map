{"version":3,"sources":["logo.svg","info.js","Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","list","name","key","Button","useState","Info","setInfo","userText","setUserText","Log","setLog","anim","useSpring","from","transform","to","useEffect","filter","content","toLowerCase","indexOf","handleUserKeyPress","event","length","newLog","slice","console","log","document","getElementById","style","handleUserKeyup","color","window","addEventListener","removeEventListener","div","id","className","onClick","Grid","container","spacing","map","data","item","xs","Paper","App","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,wOCA9BC,G,MAAQ,CACjB,CAACC,KAAK,MAAMC,IAAI,GAChB,CAACD,KAAK,QAAQC,IAAI,GAClB,CAACD,KAAK,QAAQC,IAAI,GAClB,CAACD,KAAK,OAAOC,IAAI,KC8GNC,EA1GD,WAAO,IAAD,EAGKC,mBAAS,IAHd,mBAGXC,EAHW,KAGNC,EAHM,OAIcF,mBAAS,QAJvB,mBAIXG,EAJW,KAIDC,EAJC,OAKGJ,mBAAS,IALZ,mBAKXK,EALW,KAKPC,EALO,KAWZC,EAAOC,YAAU,CACrBC,KAAK,CAEHC,UAAU,mBAGZC,GAAG,CAEDD,UAAU,qBAyDhB,OApDEE,qBAAU,WACRV,EAAQN,EAAKiB,QAAO,SAACC,GACpB,OAAgE,IAAzDA,EAAQjB,KAAKkB,cAAcC,QAAQX,EAAIU,mBAE7C,IAAME,EAAqB,SAAAC,GAAU,IAC7BpB,EAAQoB,EAARpB,IACR,GAAW,cAARA,GAA2B,WAANA,GACtB,GAAGO,EAAIc,QAAQ,EAAE,CACf,IAAIC,EAASf,EAAIgB,MAAM,GAAG,GAC1Bf,EAAOc,GACPE,QAAQC,IAAI,CAAClB,aAGD,YAARP,GAA6B,UAARA,GAAuB,UAANA,GAAqB,WAANA,EAE3DwB,QAAQC,IAAIzB,IAKZwB,QAAQC,IAAIlB,EAAIc,QAClBK,SAASC,eAAe,OAAOC,MAAMhB,UAAY,wBAEhDN,EAAY,GAAD,OAAIN,IACfQ,EAAO,GAAD,OAAID,GAAJ,OAAUP,IACfwB,QAAQC,IAAI,CAAClB,UAMXsB,EAAkB,SAAAT,GAEtBM,SAASC,eAAe,OAAOC,MAAME,MAAQ,QAC7CJ,SAASC,eAAe,OAAOC,MAAMhB,UAAY,mBAMnD,OAFAmB,OAAOC,iBAAiB,UAAWb,GACnCY,OAAOC,iBAAiB,QAASH,GAC1B,WACLE,OAAOE,oBAAoB,UAAWd,GACtCY,OAAOC,iBAAiB,QAASH,MAElC,CAACtB,IAUN,6BAEA,kBAAC,IAAS2B,IAAV,CAAcN,MAAOnB,GACnB,4BAAQ0B,GAAG,MAAMC,UAAU,uBAAuB/B,GAClD,4BAAQ8B,GAAG,MAAMC,UAAU,aAAaC,QAZ1C,WACEb,QAAQC,IAAIlB,GACZC,EAAO,MAUqDD,IAO9D,yBAAK6B,UAAU,QACT,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACxBrC,EAAKsC,KAAI,SAACC,GACT,OAAO,kBAACJ,EAAA,EAAD,CAAMK,MAAI,EAACC,GAAI,EAAG5C,IAAK0C,EAAK1C,KACjC,kBAAC6C,EAAA,EAAD,CAAOT,UAAU,QAAQM,EAAK3C,c,MClFzB+C,MAdf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKW,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,SACzC,4BAGA,kBAAC,EAAD,SCDYC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAASC,eAAe,SDyHpB,kBAAmB8B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.597a7bea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const list  = [\r\n    {name:\"Ami\",key:0},\r\n    {name:\"Botan\",key:1},\r\n    {name:\"Balia\",key:2},\r\n    {name:\"Anis\",key:3}\r\n];","import React,{useEffect,useState} from 'react';\r\nimport  {useSpring,animated} from 'react-spring'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport './Button.css';\r\nimport {list} from './info';\r\n\r\nconst Button =() => {\r\n\r\n\r\n  const [Info,setInfo] = useState([]);    \r\n  const [userText, setUserText] = useState(\"None\");\r\n  const [Log,setLog] = useState(\"\");\r\n \r\n\r\n \r\n\r\n  \r\n  const anim = useSpring({\r\n    from:{\r\n      \r\n      transform: `translateY(0px)`\r\n\r\n    },\r\n    to:{\r\n\r\n      transform: `translateY(3px)`\r\n    }\r\n\r\n  });\r\n\r\n  useEffect(() => {\r\n    setInfo(list.filter((content)=>\r\n    {return content.name.toLowerCase().indexOf(Log.toLowerCase())!==-1}));\r\n      \r\n      const handleUserKeyPress = event => {\r\n      const { key } = event;\r\n      if(key === \"Backspace\"||key===\"Delete\"){\r\n        if(Log.length>=0){\r\n          var newLog = Log.slice(0,-1);\r\n          setLog(newLog);\r\n          console.log({Log});\r\n        }\r\n      }\r\n      else if(key === \"Control\" || key === \"Shift\"||key===\"Enter\"||key===\"Escape\"){\r\n\r\n        console.log(key);\r\n      }\r\n\r\n      else{\r\n      \r\n        console.log(Log.length);\r\n      document.getElementById('pop').style.transform = 'translate(0, 0.375em)';\r\n        \r\n       setUserText(`${key}`);\r\n       setLog(`${Log}${key}`);\r\n        console.log({Log});\r\n      }\r\n       \r\n        \r\n    };\r\n\r\n    const handleUserKeyup = event =>{\r\n\r\n      document.getElementById('pop').style.color = 'white';\r\n      document.getElementById('pop').style.transform = 'translate(0, 0)';\r\n\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleUserKeyPress);\r\n    window.addEventListener(\"keyup\", handleUserKeyup);\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", handleUserKeyPress);\r\n      window.addEventListener(\"keyup\", handleUserKeyup);\r\n    };\r\n  }, [Log]); \r\n\r\nfunction logclear(){\r\n  console.log(Log)\r\n  setLog(\"\");\r\n}\r\n\r\n\r\nreturn(\r\n\r\n<div>\r\n\r\n<animated.div style={anim}>\r\n  <button id=\"pop\" className=\"big-button margin10\">{userText}</button>\r\n  <button id=\"pop\" className=\"big-button\" onClick={logclear}>{Log}</button>\r\n\r\n\r\n\r\n\r\n</animated.div> \r\n\r\n<div className=\"mt30\">\r\n      <Grid container spacing={3}>\r\n      {Info.map((data) => {\r\n        return <Grid item xs={6} key={data.key}>\r\n          <Paper className=\"pad5\">{data.name}</Paper>\r\n          </Grid>})}\r\n\r\n\r\n      </Grid>\r\n    </div>\r\n</div>\r\n\r\n);\r\n    \r\n  }\r\n\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Button from'./Button';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n \n        </p>\n        <Button/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}